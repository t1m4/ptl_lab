<?php
 \/*
 * GET  -> doc
 * POST -> action
 *  methods:
 *    - \/login                    (user,password)       -> token
 *    - \/register                 (user,password)       -> token
 *    - \/files                    (token)               -> files
 *    - \/file                     (token, uuid, sig)    -> file
 *    - \/upload                   (token, file)         -> ok 
 *\/
require('router.php');

?>



<?php
  require_once('classes\/db.php');
  require_once('classes\/utils.php');
  require_once('classes\/user.php');
  require_once('classes\/file.php');
  if (($_SERVER['REQUEST_METHOD'] === 'GET') || 
      ($_SERVER['REQUEST_METHOD'] === 'HEAD')) {
    require_once('views\/header.php');
    require_once('views\/documentation.php');
    require_once('views\/footer.php');
  } else {
    if ($_SERVER[\"CONTENT_TYPE\"] === \"application\/json\" ) {
      $data = (array) json_decode(file_get_contents('php:\/\/input'));
      if (isset($data['token'])) {
        $token = $data['token'];
      }
      if (isset($data['uuid'])) { 
        $uuid = $data['uuid'];
      }
      if (isset($data['sig'])) {
        $sig = $data['sig'];
      }
      if (isset($data['username'])) {
        $username = $data['username'];
      }
      if (isset($data['password'])) {  
        $password = $data['password'];
      }
      if (isset($data['filename'])) {  
        $filename = $data['filename'];
      }
      if (isset($data['content'])) {  
        $content = $data['content'];
      }
    } else {
      respond_with(Array(\"error\" => \"API only accepts json\"));
    }
    $user = NULL;
    if (isset($token)){
      $user = User::detokenize($token);
    } 
    if ($_GET['action'] === \"register\") {
      \/\/ login
      if (isset($username) && isset($password)){
        $user = User::register($username, $password);  
        if ($user) {
          respond_with(Array(\"token\" => User::tokenize($user)));
        }
      }
      respond_with(Array(\"error\" => \"Invalid or missing credentials\"));
    } elseif ($_GET['action'] === \"login\") {
      \/\/ login
      if (isset($username) && isset($password)){
        $user = User::login($username, $password);  
        if ($user) {
          respond_with(Array(\"token\" => User::tokenize($user)));
        }
      }
      respond_with(Array(\"error\" => \"Invalid or missing credentials\"));
    } elseif ($_GET['action'] === \"files\") {
      if ($user !== NULL) {
        respond_with(Array(\"files\" => $user->all_files()));
      }
      respond_with(Array(\"error\" => \"Authorisation fail\"));
      \/\/ all files
    } elseif ($_GET['action'] === \"file\") {
      if ($user !== NULL) {
        $file = $user->file($uuid, $sig);
        respond_with(Array(\"file\" => $file));
      }
      respond_with(Array(\"error\" => \"Authorisation fail\"));
      \/\/ file details
  
    } elseif ($_GET['action'] === \"upload\"){
      if ($user !== NULL) {
        File::upload($filename, $content, $user->id);
      }
      respond_with(Array(\"error\" => \"Authorisation fail\"));
    } else {
      \/\/ ERROR
      respond_with(Array(\"error\" => \"Invalid action\"));
    }
  }
 
?>


db.php
<?php

  $lnk = mysql_connect(\"localhost\", \"pentesterlab\", \"pentesterlab\");
  $db = mysql_select_db('ezshare', $lnk);

?>

utils.php
<?php

define('KEY', \"ooghie1Z Fae8aish OhT3fie6 Gae2aiza\");

function sign($data) {
  return hash_hmac('md5', $data, KEY);
}


function respond_with($data) {
  header(\"Content-Type: application\/json;\");
  echo json_encode($data);
  die();
}

?>


user.php
<?php

class User {
  \/\/ not going to work with mod_php
  \/\/ FIXME move in Apache config :) 
  \/\/d  const SECRET= `openssl rand 32 -hex`;
  \/\/ but then proc\/env...
  \/\/ path normalize then check on \/application path?
  function __construct($id, $username) {
    $this->id  = $id;
    $this->login  = $username;
  }

  public static function register($username, $password) {
    $sql = \"SELECT * FROM users where login=\\\"\";
    $sql.= mysql_real_escape_string($username);
    $sql.= \"\\\"\";
    $result = mysql_query($sql);
    if ($result) {
      $row = mysql_fetch_assoc($result);
      if ($username === $row['login']) {
        \/\/ User exists
        return NULL; 
      } else { 
        $sql = \"INSERT INTO `users` (login,password) values ('\";
        $sql.= mysql_real_escape_string($username);
        $sql.= \"', md5('\";
        $sql.= mysql_real_escape_string($password);
        $sql.= \"'));\";
        $result = mysql_query($sql);
      \/\/ create user
        if ($result) { 
          return new User(mysql_insert_id(), $username);
        } else {
          \/\/echo mysql_error();
          return NULL;
        }
    \/\/die(\"invalid username\/password\");
      }
    }
    return NULL;
  }


  public static function login($username, $password) {
    $sql = \"SELECT * FROM users where login=\\\"\";
    $sql.= mysql_real_escape_string($username);
    $sql.= \"\\\" and password=md5(\\\"\";
    $sql.= mysql_real_escape_string($password);
    $sql.= \"\\\")\";
    $result = mysql_query($sql);
    if ($result) {
      $row = mysql_fetch_assoc($result);
      if ($username === $row['login']) {
        return new User($row['id'], $row['login']);
      }
    }
    return NULL;
    \/\/die(\"invalid username\/password\");
  }

  public static function tokenize($user) {
    $token = urlencode(base64_encode(serialize($user))); 
    $token.= \"--\".sign($token); 
    return $token;
  }

  public static function detokenize($token) {
    list($userdata, $usersig) = explode(\"--\",$token,2);
    $user = NULL;
    if ($usersig !== sign($userdata)){
      header(\"Content-Type: application\/json;\");
      respond_with(Array(\"error\" => \"Invalid authentication token\"));
    } else {
      $user = unserialize(base64_decode(urldecode($userdata)));
    }
    return $user;
  }

  public function all_files() {
    return File::index($this->id);
  }
  public function file($uuid, $sig) {
    return File::get_file($this->id, $uuid, $sig);
  }
}
?>



file.php
<?php

class File {
  public $owner,$uuid, $content;
  public $logfile = \"\/var\/www\/logs\/application.log\";

  function __destruct() {
    \/\/ Loogging access 
    $fd = fopen($this->logfile, 'a'); 
    fwrite($fd, $_GET['action'].\":\".$this->uuid.' by '.$this->owner.\"\
\");
    fclose($fd);
  }
   
  function __construct($id, $owner, $uuid) {
    $this->id   = $id;
    $this->owner   = $owner;
    $this->uuid   = $uuid;
    echo \"\/var\/www\/data\/\".$uuid;
    $this->content    = file_get_contents(\"\/var\/www\/data\/\".$uuid); 
  }

  public static function index($user_id) {
    $sql = \"SELECT * FROM files where user_id=\".intval($user_id);
    $results = mysql_query($sql);
    $files = Array();
    if ($results) {
      while ($row = mysql_fetch_assoc($results)) {
        $files[] = Array('id' => $row['id'], 'name' => $row['name'], 
                         'uuid' => $row['uuid'], 
                         'sig' => sign(intval($user_id).':'.$row['uuid']));
      }
    }
    return $files;
  }

  public static function get_file($user_id,$uuid, $sig) {
      \/\/ verify signature
    if ($sig  != sign($user_id.':'.$uuid)) {
      respond_with(Array(\"error\" => \"Invalid Signature\"));  
    }
    else {
      \/\/ retrieve file name
      $sql = \"SELECT * FROM users where id=\".intval($id);
      $result = mysql_query($sql);
      $name = \"\";
      if ($result) {
        $row = mysql_fetch_assoc($result);
        $f = new File($id, $row['login'], $uuid);
        respond_with(Array(\"file\" => $f));  
      }
      respond_with(Array(\"error\" => \"file not found\"));  
      \/\/ file read and return content
    }
  }
  public static function upload($name, $data, $user_id){ 
    $uuid = uniqid(\"file\").uniqid();
    $sql = \"INSERT INTO files (name, uuid, user_id) values ('\";
    $sql .= mysql_real_escape_string($name);
    $sql .= \"','\".mysql_real_escape_string($uuid);
    $sql .= \"',\".intval($user_id).\")\";
    $results = mysql_query($sql);
    \/\/ overwrite
    $fd = fopen(\"\/var\/www\/data\/\".$uuid, 'w'); 
    fwrite($fd, $data); 
    fclose($fd);
    respond_with(Array(\"success\" => \"File successfully uploaded\"));  
     
  }
}
?>
